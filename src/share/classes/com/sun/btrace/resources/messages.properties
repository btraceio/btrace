# BTrace "compile time" and runtime error messages.

return.type.should.be.void = btrace probe methods must return void
btrace.program.should.be.class = btrace program must be a class (not interface or enum)
no.complex.unsafe.value = @BTrace.trusted|unsafe value should be only a plain boolean
not.a.btrace.program = @BTrace annotation is missing
no.outer.class = btrace class should not be a local class
no.asserts = asserts are not allowed
no.catch = catching exception is not allowed
no.do.while = do..while loops are not allowed
no.enhanced.for = enhanced for statements are not allowed
no.loops = loops (backward jumps) are not allowed
no.for.loop = for loops are not allowed
no.array.creation = array creation is not allowed
no.new.object = object creation is not allowed
no.synchronized.blocks = synchronized blocks are not allowed
no.synchronized.methods = probe action methods should not be synchronized
no.throw = throwing exception is not allowed
no.try = try .. catch .. finally blocks are not allowed
no.while.loop = while loops are not allowed
no.other = "other" statement(s) are not allowed
execution.loop.danger = execution of btrace program may lead to endless loop which is not allowed
method.should.be.public = btrace methods should be public
class.should.be.public = btrace class should be public
no.static.method = static methods are not allowed (using BTrace short syntax)
no.instance.method = instance methods are not allowed
no.method.calls = method calls are not allowed - only calls to BTraceUtils are allowed
no.assignment = side-effects to probed program are not allowed
no.nested.class = nested and inner classes are not allowed
no.local.class = local classes are not allowed
no.static.variables = static variables are not allowed (using BTrace short syntax)
no.instance.variables = instance variables are not allowed
object.superclass.required = btrace class should extend java.lang.Object
no.interface.implementation = btrace class can not implement interfaces
no.class.literals = class literals are not allowed
self.desc.invalid = @Self annotation applicable only for Kind.ENTRY and Kind.RETURN
probemethod.desc.invalid = @ProbeMethod annotation applicable only for Kind.ENTRY, Kind.RETURN and Kind.CALL
probeclass.desc.invalid=@ProbeClassName annotation applicable only for Kind.ENTRY, Kind.RETURN and Kind.CALL
return.desc.invalid = @Return annotation applicable only for Kind.RETURN
duration.desc.invalid = @Duration annotation applicable only for Kind.RETURN and Kind.ERROR
target-method.desc.invalid = @TargetMethodOrField annotation applicable only for Kind.CALL, Kind.FIELD_GET, Kind.FIELD_SET, Kind.ARRAY_GET and Kind.ARRAY_SET
target-instance.desc.invalid = @TargetInstance annotation applicable only for Kind.CALL, Kind.FIELD_GET, Kind.FIELD_SET, Kind.ARRAY_GET, Kind.ARRAY_SET, Kind.INSTANCEOF, Kind.CHECKCAST, Kind.ERROR, Kind.THROW, Kind.CATCH, Kind.SYNC_ENTRY or Kind.SYNC_EXIT
onexit.invalid = @OnExit annotation applicable only to methods with signature (int)void
onerror.invalid = @OnError annotation applicable only to methods with signature (java.lang.Throwable)void
multiple.param.annotation = Multiple parameters annotated by the same annotation are not allowed
sampler.invalid.location = @Sampled annotation supported only for @OnMethod annotated classes with Kind of [ENTRY, RETURN, ERROR, CALL]
missing.injected = Service fields must be annotated by @Injected
injected.no.initializer = Injected fields must not use initializer
injected.no.runtime = Injection kind is RUNTIME but the service is not a subclass of com.sun.btrace.services.spi.RuntimeService
injected.no.initializer = Injection kind is SIMPLE but the service is not a subclass of com.sun.btrace.services.spi.SimpleService
service.injector.literals = May only use literals as Service.* methods parameters
agent.no.instance.variables=instance variables are not allowed
agent.unsafe.not.allowed=Trusted mode, requested by the script, not allowed

# usage messages

btracec.usage =\
  Usage: btracec <options> <btrace source files>\n\
  where possible options include:\n  \
    -classpath <path> Specify where to find user class files and annotation processors\n  \
    -cp <path>        Specify where to find user class files and annotation processors\n  \
    -I <path>         Specify where to find include files\n  \
    -d <directory>    Specify where to place generated class files\n \
    -nopack           Do not produce packed probes. Useful when targeting pre 1.3.10 versions.\n \
    -packext          File extension for script packs (default '.class'). Valid only if '-nopack' is not specified.\n \
    -trusted          Enable trusted script (eg. no checks)

btrace.usage =\
  Usage: btrace <options> <pid> <btrace source or .class file> <btrace arguments>\n\
  where possible options include:\n  \
    --version             Show the version\n  \
    -v                    Run in verbose mode\n  \
    -o <file>             The path to store the probe output (will disable showing the output in console)\n\
    -u                    Run in trusted mode\n  \
    -d <path>             Dump the instrumented classes to the specified path\n  \
    -pd <path>            The search path for the probe XML descriptors\n  \
    -classpath <path>     Specify where to find user class files and annotation processors\n  \
    -cp <path>            Specify where to find user class files and annotation processors\n  \
    -I <path>             Specify where to find include files\n  \
    -p <port>             Specify port to which the btrace agent listens for clients\n  \
    -host <host>          Specify host to which btrace client's socket connect \n  \
    -statsd <host[:port]> Specify the statsd server, if any

btrace.agent.usage =\
  Usage: java -javaagent:java-agent.jar=<arguments> <main class> <application arguments>\n\
  where arguments is comma separated name=value pairs. Argument names include:\n  \
    bootClassPath    boot classpath to be used\n \
    systemClassPath  system classpath to be used\n \
    debug            boolean flag to specify debug mode\n  \
    trusted          boolean flag to enable trusted mode\n \
    dumpClasses      boolean flag to specify whether to dump .classes for instrumented classes\n  \
    dumpDir          directory where instrumented .class files are saved\n  \
    help             print this help message\n  \
    noServer         boolean flag to specify whether to start btrace server or not\n  \
    port             btrace agent server port\n  \
    statsd           statsd server, if any (format <host[:port]>)\n  \
    probeDescPath    directories where @OnProbe mapping descriptor XML files are searched\n  \
    stdout           redirect the btrace output to stdout instead of writing it to an arbitrary file (true/false)\n \
    scriptdir        the path to a directory containing scripts to be run at the agent startup\n \
    scriptOutputFile the path to a file the btrace agent will store its output\n \
    script           comma separated list of compiled tracing scripts to be run at the agent startup; *MUST* be the last argument in the list\n

btrace.version = BTrace v.{btrace.version}
