plugins {
  id 'java'
}

description 'A JMH benchmark to assert the overhead imposed by various types of BTrace instrumentation.'


sourceCompatibility = 8
targetCompatibility = 8

def env = System.getenv()
def javaHome = env['JAVA_HOME']


ext {
  versions = [
    jmh: '1.9.1'
  ]

  libs = [
    jmh: ["org.openjdk.jmh:jmh-core:${versions.jmh}",
          "org.openjdk.jmh:jmh-generator-annprocess:${versions.jmh}"]
  ]
}


task btracec(type: JavaExec) {
  group 'Build'
  inputs.files 'src/main/resources/scripts'
  outputs.dir "${buildDir}/classes/main"

  environment('BTRACE_HOME', "$projectDir")
  classpath configurations.compile
  main 'com.sun.btrace.compiler.Compiler'
  args '-d'
  args "${buildDir}/classes/main"
  args fileTree(dir: "src/main/resources/scripts", include: 'TraceScript.java')
}
compileJava.dependsOn btracec


['BTraceBench', 'ProfilerBenchmarks', 'StatsdBenchmarks', 'StringOpBenchmarks'].each { className ->
  task(type: JavaExec, className) {
    group 'Verification'
    description "Run benchmark for class ${className}."

    inputs.files project.classes.outputs
    inputs.files project.btracec.outputs

    classpath project.configurations.runtime
    main "net.java.btrace.${className}"
  }
}


dependencies {
  compile project(':'),
          files( rootProject.tasks.agentJar.outputs ),
          files( rootProject.tasks.bootJar.outputs ),
          files("${buildDir}/classes/main"),
          libs.jmh,
          files("${javaHome}/lib/tools.jar")
}
