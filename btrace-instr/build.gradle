import java.nio.file.Files
import java.nio.file.Paths

apply plugin: 'java'

buildscript {
    dependencies {
        classpath files('../btrace-compiler/build/classes/main/java')
    }
}

dependencies {
    // https://mvnrepository.com/artifact/org.slf4j/slf4j-api
    implementation group: 'org.slf4j', name: 'slf4j-api', version: '2.0.6'
    implementation group: 'org.ow2.asm', name: 'asm', version: "${rootProject.asmVersion}"
    implementation group: 'org.ow2.asm', name: 'asm-tree', version: "${rootProject.asmVersion}"
    implementation group: 'com.google.auto.service', name: 'auto-service', version: '1.0.1'

    implementation project(':btrace-core')
    implementation project(':btrace-services-api')
    implementation project(':btrace-runtime')
    implementation project(':btrace-compiler')
    implementation project(':btrace-statsd')

    // https://mvnrepository.com/artifact/org.jctools/jctools-core
    implementation(group: 'org.jctools', name: 'jctools-core', version: '4.0.1')

    testImplementation project(':btrace-client')
    testImplementation("org.junit.jupiter:junit-jupiter-params:5.9.1")
    testImplementation group: 'org.ow2.asm', name: 'asm-util', version: "${rootProject.asmVersion}"
}

compileTestJava {
    sourceCompatibility = 8
    targetCompatibility = 8
    options.fork = true
    options.forkOptions.executable = "${project.property("JAVA_8_HOME")}/bin/javac"
}

task compileTestProbes {
    dependsOn compileTestJava
    doLast {
        def path = project(':btrace-instr').sourceSets.main.runtimeClasspath

        def loader = new URLClassLoader(path.collect { f -> f.toURL() } as URL[])
        def compiler = loader.loadClass('org.openjdk.btrace.compiler.Compiler')
        def rtCp = sourceSets.main.runtimeClasspath.collect { it.absolutePath }.join(':')

        def args = ["-cp", "${buildDir}/classes/java/test:${buildDir}/classes/java/java11_dummy:${rtCp}", "-d", "${buildDir}/classes"]

        def files = fileTree(dir: "src/test/btrace", include: '**/*.java', exclude: 'verifier/**/*.java').findAll {
            it != null
        }.collect { it }

        args.addAll(files)

        compiler.main(args as String[])
    }
}

test {
    dependsOn cleanTest
    inputs.files compileTestProbes.outputs
    //inputs.files buildDTrace.outputs
    testLogging.showStandardStreams = true

    def props = new Properties()
    props.load(Files.newInputStream(Paths.get(System.getenv("JAVA_HOME"), "release")))
    if (props.getProperty("JAVA_VERSION")?.contains("1.8")) {
        jvmArgs "-Dproject.version=${project.version}"
    } else {
        jvmArgs '-XX:+IgnoreUnrecognizedVMOptions', '--add-opens', 'java.base/jdk.internal.reflect=ALL-UNNAMED', '--add-exports', 'java.base/jdk.internal.reflect=ALL-UNNAMED', "-Dproject.version=${project.version}"
    }
}