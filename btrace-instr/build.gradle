apply plugin: 'java'

buildscript {
    dependencies {
        classpath files('../btrace-compiler/build/classes/main/java')
    }
}

sourceSets {
    java11_dummy {
        java {
            srcDirs = ['src/main/java11_dummy']
        }
    }
    java15 {
        java {
            srcDirs = ['src/main/java15']
        }
    }
}

dependencies {
    compile(group: 'org.ow2.asm', name: 'asm', version: "${rootProject.asmVersion}")
    compile(group: 'org.ow2.asm', name: 'asm-tree', version: "${rootProject.asmVersion}")
    compile group: 'com.google.auto.service', name: 'auto-service', version: '1.0-rc4'
    compile project(':btrace-core')
    compile project(':btrace-runtime')
    compile project(':btrace-compiler')
    compile project(':btrace-statsd')
    testCompile project(':btrace-client')
}

compileJava11_dummyJava {
    sourceCompatibility = 8
    targetCompatibility = 8
    options.fork = true
    options.forkOptions.executable = "${project.property("JAVA_11_HOME")}/bin/javac"
    options.forkOptions.javaHome = file("${project.property("JAVA_11_HOME")}")
}

compileJava15Java {
    sourceCompatibility = 15
    targetCompatibility = 15
    options.fork = true
    options.forkOptions.executable = "${project.property("JAVA_15_HOME")}/bin/javac"
    options.forkOptions.javaHome = file("${project.property("JAVA_15_HOME")}")
    options.compilerArgs.addAll(['--add-exports', 'java.base/jdk.internal.reflect=ALL-UNNAMED', '--add-exports', 'java.base/jdk.internal.perf=ALL-UNNAMED'])
}

compileTestJava {
    sourceCompatibility = 8
    targetCompatibility = 8
    options.fork = true
    options.forkOptions.executable = "${project.property("JAVA_8_HOME")}/bin/javac"
}

task compileTestProbes {
    dependsOn compileTestJava, compileJava11_dummyJava
    doLast {
        def path = project(':btrace-instr').sourceSets.main.runtimeClasspath

        def loader = new URLClassLoader(path.collect { f -> f.toURL() } as URL[])
        def compiler = loader.loadClass('org.openjdk.btrace.compiler.Compiler')
        def rtCp = sourceSets.main.runtimeClasspath.collect { it.absolutePath }.join(':')

        def args = ["-cp", "${buildDir}/classes/java/test:${buildDir}/classes/java/java11_dummy:${rtCp}", "-d", "${buildDir}/classes"]

        def files = fileTree(dir: "src/test/btrace", include: '**/*.java', exclude: 'verifier/**/*.java').findAll {
            it != null
        }.collect { it }

        args.addAll(files)

        compiler.main(args as String[])
    }
}

task buildEventsJar(type: Jar) {
    inputs.files compileJava11_dummyJava
    from files("${project.buildDir}/classes/java/java11_dummy")
    archiveBaseName = "events"
    archiveVersion = ""
    archiveClassifier = ""
}

test {
    onlyIf {
        new File("${projectDir}/../btrace-dist/build/resources/main/${project.version}/libs/btrace-client.jar").exists()
    }
    dependsOn cleanTest, buildEventsJar
    inputs.files compileTestProbes.outputs
    //inputs.files buildDTrace.outputs
    testLogging.showStandardStreams = true

    jvmArgs '--add-opens', 'java.base/jdk.internal.reflect=ALL-UNNAMED', '--add-exports', 'java.base/jdk.internal.reflect=ALL-UNNAMED', "-Dproject.version=${project.version}"
}

dependencies {
    java15Implementation files(sourceSets.main.output.classesDirs) {
        builtBy compileJava
    }
}

jar {
    into('') {
        from sourceSets.java15.output
    }
}