plugins {
    alias(libs.plugins.shadow)
}

dependencies {
    implementation libs.slf4j
    implementation libs.asm

    def toolsJar = getToolsJar();
    if (toolsJar.getAsFile().exists()) {
        implementation files("${toolsJar}")
    }
    implementation project(':btrace-core')
    implementation project(':btrace-services-api')
    implementation project(':btrace-runtime')
    implementation project(':btrace-instr')
}

shadowJar {
    include {
        if (it.directory) {
            return true
        }
        if (it.path.endsWith('.jar')) {
            return true
        }
        if (it.path.startsWith('org/objectweb/asm/')) {
            if (it.path.startsWith('org/objectweb/asm/commons/') ||
                    it.path.startsWith('org/objectweb/asm/util/') ||
                    it.path.startsWith('org/objectweb/asm/xml/')) {
                return false
            }
            return true
        }
        return it.path.startsWith('org/jctools/') ||
                it.path.startsWith("org/slf4j/") ||
                it.path.startsWith('org/openjdk/btrace/agent/') ||
                it.path.startsWith('org/openjdk/btrace/instr/') ||
                it.path.startsWith('org/openjdk/btrace/core/') ||
                it.path.startsWith('org/openjdk/btrace/runtime/') ||
                it.path.startsWith('org/openjdk/btrace/services/') ||
                it.path.startsWith('org/openjdk/btrace/statsd/')
    }

    relocate 'org.jctools', 'org.openjdk.btrace.libs.agent.org.jctools'
    relocate 'org.objectweb.asm', 'org.openjdk.btrace.libs.org.objectweb.asm'
    relocate 'org.slf4j', 'org.openjdk.btrace.libs.org.slf4j'
}

task unpackJar(type: Copy) {
    dependsOn shadowJar
    from zipTree(shadowJar.archiveFile)
    into "${buildDir}/tmp/unpackedJar"
}

task renameClassFiles(type: Delete) {
    dependsOn unpackJar
    doLast {
        fileTree("${buildDir}/tmp/unpackedJar/org/openjdk/btrace/agent").include('**/*.class').each { File file ->
            if (file.name != 'Agent.class' && !file.name.startsWith('AgentClassLoader')) {
                file.renameTo(new File(file.parent, file.name.replace('.class', '.classdata')))
            }
        }
    }
}

task agentJar(type: Jar) {
    dependsOn renameClassFiles
    from "${buildDir}/tmp/unpackedJar"
    archiveFileName = project.tasks.shadowJar.archiveFileName
    destinationDirectory = project.tasks.shadowJar.destinationDirectory
    manifest {
        attributes(
                "Premain-Class": "org.openjdk.btrace.agent.Agent",
                "Agent-Class": "org.openjdk.btrace.agent.Agent",
                "Can-Redefine-Classes": true,
                "Can-Retransform-Classes": true,
                "Boot-Class-Path": "btrace-boot.jar"
        )
    }
}